#!/usr/bin/env python3

# This script does the following.
# 1. Take the name of a spack package
# 2. Build the package and all dependencies, and dependency versions
# 3. Create some database of facts
# 4. For each library discovered, emulate a splice and ask "Can this library replace the previous version?

import argparse
import logging
import os
import re
import json
import subprocess
import jsonschema
import time
import shutil
import yaml
import sys
import sqlite3
import clingo
from collections.abc import Sequence

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("smeagle-db")

# We want the root
here = os.path.abspath(os.path.dirname(__file__))

clingo_cffi = hasattr(clingo.Symbol, "_rep")

# Fields schema

fields = {
    "type": "array",
    "items": {
        "type": "object",
        "required": ["name"],
        "additionalProperties": False,
        "properties": {
            "name": {"type": "string"},
            "class": {"type": "string"},
            "type": {"type": "string"},
            "size": {"type": "string"},
            # TODO should we add validation of when fields is allowed?
            # This indicates that fields can be recursive
            "fields": {"$ref": "#"},
        },
    },
}


# Schema for smeagle model
model_schema = {
    "$schema": "http://json-schema.org/schema#",
    "title": "build-abi-containers package schema",
    "type": "object",
    "additionalProperties": False,
    "required": ["library", "locations"],
    "properties": {
        "library": {"type": "string"},
        "locations": {
            "type": "array",
            "items": {
                "type": "object",
                "required": ["function"],
                "properties": {
                    "function": {
                        "type": "object",
                        "required": ["name"],
                        "properties": {
                            "name": {"type": "string"},
                            "parameters": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "additionalProperties": False,
                                    "properties": {
                                        "name": {"type": "string"},
                                        "indirections": {"type": ["string", "null"]},
                                        "class": {"type": "string"},
                                        "type": {"type": "string"},
                                        "size": {"type": "string"},
                                        "location": {"type": "string"},
                                        "fields": fields,
                                        "direction": {
                                            "type": "string",
                                            "enum": ["import", "export", "unknown"],
                                        },
                                    },
                                },
                            },
                        },
                    }
                },
            },
        },
    },
}


def issequence(obj):
    if isinstance(obj, string_types):
        return False
    return isinstance(obj, (Sequence, types.GeneratorType))


def listify(args):
    if len(args) == 1 and issequence(args[0]):
        return list(args[0])
    return list(args)


class AspObject(object):
    """
    Object representing a piece of ASP code.
    """


def _id(thing):
    """
    Quote string if needed for it to be a valid identifier.
    """
    if isinstance(thing, AspObject):
        return thing
    elif isinstance(thing, bool):
        return '"%s"' % str(thing)
    elif isinstance(thing, int):
        return str(thing)
    else:
        return '"%s"' % str(thing)


class AspFunction(AspObject):
    """
    An asp function
    """

    def __init__(self, name, args=None):
        self.name = name
        self.args = [] if args is None else args

    def __call__(self, *args):
        return AspFunction(self.name, args)

    def symbol(self, positive=True):
        def argify(arg):
            if isinstance(arg, bool):
                return clingo.String(str(arg))
            elif isinstance(arg, int):
                return clingo.Number(arg)
            else:
                return clingo.String(str(arg))

        return clingo.Function(
            self.name, [argify(arg) for arg in self.args], positive=positive
        )

    def __getitem___(self, *args):
        self.args[:] = args
        return self

    def __str__(self):
        return "%s(%s)" % (self.name, ", ".join(str(_id(arg)) for arg in self.args))

    def __repr__(self):
        return str(self)


class AspFunctionBuilder(object):
    def __getattr__(self, name):
        return AspFunction(name)


fn = AspFunctionBuilder()


class Result(object):
    """
    Result of an ASP solve.
    """

    def __init__(self, asp=None):
        self.asp = asp
        self.satisfiable = None
        self.optimal = None
        self.warnings = None
        self.nmodels = 0

        # specs ordered by optimization level
        self.answers = []
        self.cores = []

    def print_cores(self):
        for core in self.cores:
            tty.msg(
                "The following constraints are unsatisfiable:",
                *sorted(str(symbol) for symbol in core)
            )


class PyclingoDriver:
    def __init__(self, cores=True, out=None):
        """
        Driver for the Python clingo interface.

        Arguments:
            cores (bool): whether to generate unsatisfiable cores for better
                error reporting.
            out (file-like): optional stream to write a text-based ASP program
                for debugging or verification.
        """
        global clingo
        if out:
            self.out = out
        else:
            self.devnull()
        self.cores = cores

    def devnull(self):
        self.f = open(os.devnull, "w")
        self.out = self.f

    def __exit__(self):
        self.f.close()

    def title(self, name, char):
        self.out.write("\n")
        self.out.write("%" + (char * 76))
        self.out.write("\n")
        self.out.write("%% %s\n" % name)
        self.out.write("%" + (char * 76))
        self.out.write("\n")

    def h1(self, name):
        self.title(name, "=")

    def h2(self, name):
        self.title(name, "-")

    def newline(self):
        self.out.write("\n")

    def fact(self, head):
        """
        ASP fact (a rule without a body).
        """
        symbol = head.symbol() if hasattr(head, "symbol") else head

        self.out.write("%s.\n" % str(symbol))

        atom = self.backend.add_atom(symbol)
        self.backend.add_rule([atom], [], choice=self.cores)
        if self.cores:
            self.assumptions.append(atom)

    def solve(
        self,
        setup,
        nmodels=0,
        stats=False,
        logic_programs=None,
        facts_only=False,
    ):
        """
        Run the solver for a model and some number of logic programs
        """
        # logic programs to give to the solver
        logic_programs = logic_programs or []
        if not isinstance(logic_programs, list):
            logic_programs = [logic_programs]

        # Initialize the control object for the solver
        self.control = clingo.Control()
        self.control.configuration.solve.models = nmodels
        self.control.configuration.asp.trans_ext = "all"
        self.control.configuration.asp.eq = "5"
        self.control.configuration.configuration = "tweety"
        self.control.configuration.solve.parallel_mode = "2"
        self.control.configuration.solver.opt_strategy = "usc,one"

        # set up the problem -- this generates facts and rules
        self.assumptions = []
        with self.control.backend() as backend:
            self.backend = backend
            setup.setup(self)

        # If we only want to generate facts, cut out early
        if facts_only:
            return

        # read in provided logic programs
        for logic_program in logic_programs:
            self.control.load(logic_program)

        # Grounding is the first step in the solve -- it turns our facts
        # and first-order logic rules into propositional logic.
        self.control.ground([("base", [])])

        # With a grounded program, we can run the solve.
        result = Result()
        models = []  # stable models if things go well
        cores = []  # unsatisfiable cores if they do not

        def on_model(model):
            models.append((model.cost, model.symbols(shown=True, terms=True)))

        # Won't work after this, need to write files
        solve_kwargs = {
            "assumptions": self.assumptions,
            "on_model": on_model,
            "on_core": cores.append,
        }
        if clingo_cffi:
            solve_kwargs["on_unsat"] = cores.append
        solve_result = self.control.solve(**solve_kwargs)

        # once done, construct the solve result
        result.satisfiable = solve_result.satisfiable

        def stringify(x):
            if clingo_cffi:
                # Clingo w/ CFFI will throw an exception on failure
                try:
                    return x.string
                except RuntimeError:
                    return str(x)
            else:
                return x.string or str(x)

        if result.satisfiable:
            min_cost, best_model = min(models)
            result.answers = {}
            for sym in best_model:
                if sym.name not in result.answers:
                    result.answers[sym.name] = []
                result.answers[sym.name].append([stringify(a) for a in sym.arguments])

        elif cores:
            symbols = dict((a.literal, a.symbol) for a in self.control.symbolic_atoms)
            for core in cores:
                core_symbols = []
                for atom in core:
                    sym = symbols[atom]
                    core_symbols.append(sym)
                result.cores.append(core_symbols)

        if stats:
            print("Statistics:")
            pprint.pprint(self.control.statistics)
        return result


class SolverBase:
    """
    Common base functions for some kind of solver.

    For stability, compatibility, or just fact generation.
    """

    def setup(self, driver):
        """
        Setup to prepare for the solve.
        """
        self.gen = driver

    def print(self, data, title):
        """
        Print a result to the terminal
        """
        if data:
            print("\n" + title)
            print("---------------")
            for entry in data:
                print(" " + " ".join(entry))


class StabilitySolver(SolverBase):
    """
    Class to orchestrate a Stability Solver.
    """

    def __init__(self, lib1, lib2):
        """
        Create a driver to run a compatibility model test for two libraries.
        """
        # The driver will generate facts rules to generate an ASP program.
        self.driver = PyclingoDriver()
        self.setup = StabilitySolverSetup(lib1, lib2)

    def solve(self, logic_programs, detail=False):
        """
        Run the solve
        """
        result = self.driver.solve(self.setup, logic_programs=logic_programs)
        missing_imports = result.answers.get("missing_imports", [])
        missing_exports = result.answers.get("missing_exports", [])
        if missing_imports or missing_exports:
            logger.info(
                "Libraries are not stable: %s missing exports, %s missing_imports"
                % (len(missing_exports), len(missing_imports))
            )
            if detail:
                self.print(missing_imports, "Missing Imports")
                self.print(missing_exports, "Missing Exports")


class FactGenerator(SolverBase):
    """
    Class to orchestrate fact generation (uses FactGeneratorSetup)
    """

    def __init__(self, lib):
        """
        Create a driver to run a compatibility model test for two libraries.
        """
        # The driver will generate facts rules to generate an ASP program.
        self.driver = PyclingoDriver(out=sys.stdout)
        self.setup = FactGeneratorSetup(lib)

    def solve(self):
        """
        Generate facts
        """
        return self.driver.solve(self.setup, facts_only=True)


class GeneratorBase:
    """
    The GeneratorBase is the base for any kind of Setup (fact generator or solve)
    Base functions to set up an ABI Stability and Compatability Solver.
    """

    def add_library(self, lib, identifier=None):
        """
        Given a loaded Smeagle Model, generate facts for it.
        """
        self.gen.h2("Library: %s" % lib.name)

        # Generate a fact for each location
        for loc in lib.data.get("locations", []):

            # Functions
            self.generate_function(lib, loc.get("function"), identifier)

    def generate_function(self, lib, func, identifier=None):
        """
        Generate facts for a function
        """
        if not func:
            return

        name = func["name"]
        seen = set()

        for param in func.get("parameters", []):

            # These values assume no underlying type (defaults)
            param_name = param["name"]
            param_type = param["class"]  # param['type'] is compiler specific

            # If the param has fields, continue printing until we are done
            fields = param.get("fields", [])

            # If we have an underlying type, use name, type, from there
            if "underlying_type" in param:
                param_name = param["underlying_type"]["name"]

                # Use these fields (unless they aren't defined)
                param_type = param["underlying_type"].get("class") or param_type

                # If the param has fields, continue printing until we are done
                fields = param["underlying_type"].get("fields", []) or fields

            # Location and direction are always with the original parameter
            self.gen.fact(
                fn.abi_typelocation(
                    lib.name,
                    func["name"],
                    param_name,
                    param_type,
                    param["location"],
                    param["direction"],
                    param.get("indirections", "0"),
                )
            )

            # While we have fields, keep adding them as facts until no more
            while fields:
                field = fields.pop(0)
                self.gen.fact(
                    # The library, function name, direction and location are the same
                    fn.abi_typelocation(
                        lib.name,
                        func["name"],
                        field.get("name", ""),
                        field.get("class", ""),
                        param["location"],
                        param["direction"],
                        field.get("indirections", "0"),
                    )
                )
                # Fields can have nested fields
                fields += field.get("fields", [])

            # If no identifier, skip the last step
            if not identifier:
                continue

            # This is only needed for the stability model to identify membership
            # of a particular function symbol, etc. with a library set (e.g., a or b)
            # Symbol, Type, Register, Direction, Pointer Indirections
            args = [
                func["name"],
                param["class"],
                param["location"],
                param["direction"],
                param.get("indirections", "0"),
            ]
            fact = AspFunction("is_%s" % identifier, args=args)
            if fact not in seen:
                self.gen.fact(fact)
                seen.add(fact)


class StabilitySolverSetup(GeneratorBase):
    """
    Class to set up and run an ABI Stability and Compatability Solver.
    """

    def __init__(self, lib1, lib2):
        self.lib1 = lib1
        self.lib2 = lib2

    def setup(self, driver):
        """
        Setup to prepare for the solve.

        This function overrides the base setup, which will generate facts only
        for one function.
        """
        self.gen = driver
        self.gen.h1("Library Facts")
        self.add_library(self.lib1, "a")
        self.add_library(self.lib2, "b")


class FactGeneratorSetup(GeneratorBase):
    """
    Class to accept one library and generate facts.
    """

    def __init__(self, lib):
        self.lib = lib

    def setup(self, driver):
        """
        Setup to prepare for the solve.

        This base function provides fact generation for one library.
        """
        self.gen = driver
        self.gen.h1("Library Facts")
        self.add_library(self.lib)


def read_json(filename):
    with open(filename, "r") as fd:
        data = json.loads(fd.read())
    return data


smeagle_table_create = """
CREATE TABLE IF NOT EXISTS abi (
    id integer PRIMARY KEY AUTOINCREMENT,
    name text NOT NULL UNIQUE,
    data json
);
"""

smeagle_get_record = """
SELECT * FROM abi WHERE name = "%s"
"""

smeagle_get_all = "SELECT * FROM abi"


smeagle_create_record = """
INSERT INTO abi(name, data) VALUES(?,?);
"""


class Model:
    def __init__(self, id, name, data):
        self.id = id
        self.name = name
        self.data = json.loads(data)

    def __str__(self):
        return self.name

    def __repr__(self):
        return str(self)


class SmeagleDatabase:
    def __init__(self, root):
        """
        Load in Smeagle output files, write to database, and run solver.
        """
        self.root = root
        self.dbfile = os.path.join(self.root, "smeagle.sqlite")
        self.connect()
        self.cursor = self.conn.cursor()
        self.stability_lp = os.path.join(self.root, "lp", "stability.lp")
        # Keep any newly loaded records
        self.records = []

    def connect(self):
        """
        Connect to the sqlite database
        """
        try:
            self.conn = sqlite3.connect(self.dbfile)
        except Error as e:
            sys.exit("Cannot connect to database %s" % self.dbfile)

    def create_tables(self):
        """
        Create tables if they don't exist.
        """
        self.cursor.execute(smeagle_table_create)

    def __exit__(self):
        self.conn.close()

    def generate_facts(self, lib):
        """
        Generate facts for one entry.
        """
        data = self.get(lib)

        # Cut out early if we don't have the records
        if not data:
            sys.exit("Cannot find database entry for %s." % lib)

        setup = FactGenerator(data[0])
        setup.solve()

    def stability_test(self, lib1, lib2, detail=False):
        """
        Run the stability test for two entries.
        """
        # We must have the stability program!
        if not os.path.exists(self.stability_lp):
            sys.exit("Logic program %s does not exist!" % self.stability_lp)
        data1 = self.get(lib1)
        data2 = self.get(lib2)

        # Cut out early if we don't have the records
        if not data1 or not data2:
            sys.exit("Cannot find both database entries.")

        setup = StabilitySolver(data1[0], data2[0])
        setup.solve(logic_programs=self.stability_lp, detail=detail)

    def load(self, path):
        """
        Load results (json) files into Smeagle database
        """
        if not os.path.exists(path):
            sys.exit("%s does not exist." % path)

        # Create tables on load if do not exist
        self.create_tables()

        # Load in valid model json
        for result in os.listdir(path):
            self.load_data(os.path.join(path, result))

    def list(self):
        """
        List all records in the database.
        """
        self.cursor.execute(smeagle_get_all)
        for record in self.cursor.fetchall():
            self.records.append(Model(record[0], record[1], record[2]))
        return self.records

    def get(self, name):
        """
        Get a database record based on the name (unique)
        """
        self.cursor.execute(smeagle_get_record % name)
        records = []
        for record in self.cursor.fetchall():
            logger.info("Retrieving record for %s" % record[1])
            records.append(Model(record[0], record[1], record[2]))
        return records

    def load_data(self, path):
        """
        Load a json result into the sqlite database
        """
        data = read_json(path)
        name = os.path.basename(path)

        # We can only include valid models
        try:
            jsonschema.validate(data, schema=model_schema)
            self.create(name, data)
        except:
            logger.warning("%s is not valid, skipping!" % path)

    def create(self, name, data):
        """
        This does a create, only if it does not exist
        """
        records = self.get(name)
        if not records:
            self.cursor.execute(smeagle_create_record, (name, json.dumps(data)))
            self.conn.commit()
            records = self.get(name)
        return records


def get_parser():
    parser = argparse.ArgumentParser(description="Smeagle Runner")

    description = "demo of running Smeagle to save facts and run stability tests"
    subparsers = parser.add_subparsers(
        help="run-tests actions",
        title="actions",
        description=description,
        dest="command",
    )

    # Step 1 is loading into sqlite database
    load = subparsers.add_parser("load", help="Load smeagle json output into database")
    load.add_argument("path", help="path of directory of json dumps to load")

    # List what is in the database
    listing = subparsers.add_parser("list", help="List entries in the database.")

    # Run a stability test for two libraries
    stability_test = subparsers.add_parser(
        "stability-test", help="List entries in the database."
    )

    # Generate facts for one libraryh
    facts = subparsers.add_parser(
        "facts", help="Generate facts (asp atoms) for one library."
    )
    facts.add_argument(
        "single_lib", help="single library database identifier to generate facts for."
    )

    libs = stability_test.add_argument(
        "libs", help="Library ids to run stability tests for (N=2)", nargs=2
    )
    stability_test.add_argument(
        "--detail", default=False, action="store_true", help="Show detailed results."
    )

    for command in [load, listing, stability_test, facts]:
        command.add_argument(
            "--root",
            "-r",
            dest="root",
            help="The root for writing the database and ./results should be found.",
            default=os.getcwd(),
        )
    return parser


def main():
    """
    Entrypoint for running Smeagle stabilit tests, etc.
    """
    parser = get_parser()

    def help(return_code=0):
        parser.print_help()
        sys.exit(return_code)

    # If an error occurs while parsing the arguments, the interpreter will exit with value 2
    args, extra = parser.parse_known_args()
    if not args.command:
        help()

    smeagle = SmeagleDatabase(args.root)
    if args.command == "load":
        smeagle.load(args.path)

    # List all entries in the database
    elif args.command == "list":
        for record in smeagle.list():
            logger.info(record.name)

    # Just facts for one library
    elif args.command == "facts":
        smeagle.generate_facts(args.single_lib)

    # Stability test between two libraries
    elif args.command == "stability-test":
        smeagle.stability_test(*args.libs, detail=args.detail)


if __name__ == "__main__":
    main()
